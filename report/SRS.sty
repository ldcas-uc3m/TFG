% == SRS.sty - Simple LaTeX2e support for software engineering tasks
%              THIS PACKAGE REQUIRES LUALATEX.
%
% Copyright 2014, 2019 Javier L. Gómez, University Carlos III of Madrid
%
% This work is licensed under a Creative Commons Attribution-ShareAlike 4.0
% International License (https://creativecommons.org/licenses/by-sa/4.0/).

\ProvidesPackage{SRS}

\RequirePackage{pgffor}
\RequirePackage{graphicx}
\RequirePackage{array}
\RequirePackage{calc}
\RequirePackage{xparse}
\RequirePackage{float}
\RequirePackage{hyperref}
\usepackage{xifthen}  % \isempty
\RequirePackage{booktabs}  % \toprule, \bottomrule


% PACKAGE OPTIONS

% english
\newif\if@langen@pp\@langen@ppfalse  % check en language
\DeclareOption{en}{\@langen@pptrue}
% spanish
\newif\if@langes@pp\@langes@ppfalse  % check es language
\DeclareOption{es}{\@langes@pptrue}

% traceability
\newif\if@traceability@pp\@traceability@ppfalse
\DeclareOption{enableTraceability}{\@traceability@pptrue}

% captions on tables
\newif\if@captions@pp\@captions@ppfalse
\DeclareOption{enableCaptions}{\@captions@pptrue}

\ExecuteOptions{en}  % defaults
\ProcessOptions\relax



% --8<---- Template texts

\newcommand\@na{N/A}

% english

\if@langen@pp
  \def\@req{Requirement}
  \def\@req@u{User requirement}
  \def\@req@s{Software requirement}
  \def\@uc{Use case}
  \def\@component{Component}
  \def\@test{Test}
  % template captions
  \def\@req@template@u{\@req@u~template}
  \def\@req@template@s{\@req@s~template}
  \def\@uc@template{\@uc~template}
  \def\@component@template{\@component~template}
  \def\@test@template{\@test~template}
  % attribute names
  \def\@req@description{Description}
  \def\@req@priocus{Necessity}
  \def\@req@priodev{Priority}
  \def\@req@sta{Stability}
  \def\@req@verif{Verifiability}
  \def\@req@origin{Origin}
  \def\@uc@name{Name}
  \def\@uc@actors{Actors}
  \def\@uc@shortdescription{Objetive}
  \def\@uc@description{Description}
  \def\@uc@precond{Pre-condition}
  \def\@uc@postcond{Post-condition}
  \def\@component@role{Role}
  \def\@component@deps{Dependencies}
  \def\@component@description{Description}
  \def\@component@data{Data}
  \def\@component@resources{Resources}
  \def\@component@origin{Origin}
  \def\@component@types{Types}
  \def\@component@members{Functions/variables}
  \def\@test@description{Description}
  \def\@test@input{Input}
  \def\@test@output{Output}
  \def\@test@env{Enviroment}
  \def\@test@origin{Origin}
  % attribute values
  \def\@req@valueof@pc@h{Essential}
  \def\@req@valueof@pc@m{Convenient}
  \def\@req@valueof@pc@l{Optional}
  \def\@req@valueof@pd@h{High}
  \def\@req@valueof@pd@m{Medium}
  \def\@req@valueof@pd@l{Low}
  \def\@req@valueof@s@nc{Constant}
  \def\@req@valueof@s@c{Inconstant}
  \def\@req@valueof@s@vi{Very unstable}
  \def\@req@valueof@v@h{High}
  \def\@req@valueof@v@m{Medium}
  \def\@req@valueof@v@l{Low}
  % attribute descriptions
  \def\@req@description@desc{Detailed description of the requirement.}
  \def\@req@priocus@desc{Priority of the requirement for the user (\textit{\@req@valueof@pc@h}, \textit{\@req@valueof@pc@m} or \textit{\@req@valueof@pc@l}).}
  \def\@req@priodev@desc{Priority of the requirement for the developer (\textit{\@req@valueof@pd@h}, \textit{\@req@valueof@pd@m} or \textit{\@req@valueof@pd@l}).}
  \def\@req@sta@desc{Indicates the requirement's variability trough the development process (\textit{\@req@valueof@s@nc}, \textit{\@req@valueof@s@c} or \textit{\@req@valueof@s@vi}).}
  \def\@req@verif@desc{Ability to test the validity of the requirement (\textit{\@req@valueof@v@h}, \textit{\@req@valueof@v@m} or \textit{\@req@valueof@v@l}).}
  \def\@req@origin@desc{User requirements that derived this requirement.}
  \def\@uc@name@desc{Brief description of the use case.}
  \def\@uc@actors@desc{External agent that executes the use case.}
  \def\@uc@shortdescription@desc{The use case's purpose.}
  \def\@uc@description@desc{Steps that the external agent must take to execute the use case.}
  \def\@uc@precond@desc{Conditions that must be fulfilled \textit{before} executing the use case.}
  \def\@uc@postcond@desc{Conditions that must be fulfilled \textit{after} executing the use case.}
  \def\@component@role@desc{Component's function in the system.}
  \def\@component@deps@desc{Components that depend on this component.}
  \def\@component@description@desc{Purpose of the component.}
  \def\@component@data@desc{Input (\textit{in}) and output (\textit{out}) values of the component.}
  \def\@component@resources@desc{Resources that use the component.}
  \def\@component@origin@desc{Software requirements that derived the component.}
  \def\@component@type@desc{Component type.}
\fi

% spanish

\if@langes@pp
  \def\@req{Requisito}
  \def\@req@u{\@req~de usuario}
  \def\@req@s{\@req~de software}
  \def\@uc{Caso de uso}
  \def\@component{Componente}
  \def\@test{Prueba}
  % template captions
  \def\@req@template@u{Plantilla de~\@req@u}
  \def\@req@template@s{Plantilla de~\@req@s}
  \def\@uc@template{Plantilla de \@uc}
  \def\@component@template{Plantilla de~\@component}
  \def\@test@template{Plantilla de~\@test}
  % attribute names
  \def\@req@description{Descripción}
  \def\@req@priocus{Necesidad}
  \def\@req@priodev{Prioridad}
  \def\@req@sta{Estabilidad}
  \def\@req@verif{Verificabilidad}
  \def\@req@origin{Origen}
  \def\@uc@name{Nombre}
  \def\@uc@actors{Actores}
  \def\@uc@shortdescription{Objetivo}
  \def\@uc@description{Descripción}
  \def\@uc@precond{Pre-condición}
  \def\@uc@postcond{Post-condición}
  \def\@component@role{Rol}
  \def\@component@deps{Dependencias}
  \def\@component@description{Descripción}
  \def\@component@data{Datos}
  \def\@component@resources{Recursos}
  \def\@component@origin{Origen}
  \def\@component@types{Tipos}
  \def\@component@members{Funciones/variables}
  \def\@test@description{Descripción}
  \def\@test@input{Entrada}
  \def\@test@output{Salida}
  \def\@test@env{Entorno}
  \def\@test@origin{Origen}
  % attribute values
  \def\@req@valueof@pc@h{Esencial}
  \def\@req@valueof@pc@m{Conveniente}
  \def\@req@valueof@pc@l{Opcional}
  \def\@req@valueof@pd@h{Alta}
  \def\@req@valueof@pd@m{Media}
  \def\@req@valueof@pd@l{Baja}
  \def\@req@valueof@s@nc{No cambia}
  \def\@req@valueof@s@c{Cambiante}
  \def\@req@valueof@s@vi{Muy inestable}
  \def\@req@valueof@v@h{Alta}
  \def\@req@valueof@v@m{Media}
  \def\@req@valueof@v@l{Baja}
  % attribute descriptions
  \def\@req@description@desc{Especificación del requisito en un lenguaje claro, conciso y no ambiguo.}
  \def\@req@priocus@desc{Prioridad del requisito para el usuario (\textit{\@req@valueof@pc@h}, \textit{\@req@valueof@pc@m} or \textit{\@req@valueof@pc@l}).}
  \def\@req@priodev@desc{Prioridad del requisito para el desarrollador (\textit{\@req@valueof@pd@h}, \textit{\@req@valueof@pd@m} or \textit{\@req@valueof@pd@l}).}
  \def\@req@sta@desc{Indica si el requisito se modifica durante el desarrollo (\textit{\@req@valueof@s@nc}, \textit{\@req@valueof@s@c} or \textit{\@req@valueof@s@vi}).}
  \def\@req@verif@desc{Capacidad de comprobar la validez del requisito (\textit{\@req@valueof@v@h}, \textit{\@req@valueof@v@m} or \textit{\@req@valueof@v@l}).}
  \def\@req@origin@desc{Referencia a los requisitos de usuario que dieron lugar al requisito.}
  \def\@uc@name@desc{Descripción breve del caso de uso.}
  \def\@uc@actors@desc{Agente externo que ejecuta el caso de uso.}
  \def\@uc@shortdescription@desc{Propósito del caso de uso.}
  \def\@uc@description@desc{Pasos que debe seguir el actor para ejecutar el caso de uso.}
  \def\@uc@precond@desc{Condiciones previas que se deben cumplir para ejecutar el caso de uso.}
  \def\@uc@postcond@desc{Condiciones que se deben cumplir después de ejecutar el caso de uso.}
  \def\@component@role@desc{Papel del componente en el sistema.}
  \def\@component@deps@desc{Componentes que dependen de este.}
  \def\@component@description@desc{Explicación del componente.}
  \def\@component@data@desc{Valores de entrada (\textit{in}) y salida (\textit{out}) del componente.}
  \def\@component@resources@desc{Recursos que utiliza el componente.}
  \def\@component@origin@desc{Requisitos software que dieron lugar al componente.}
  \def\@component@type@desc{Tipo del componente.}
\fi


% \@req@parseArgs - Parses string of the form `pc=h,pd=l,s=nc,v=m' and
%                   sets \@@req@XX accordingly
\def\@req@parseArgs pc=#1,pd=#2,s=#3,v=#4;{
  \xdef\@@req@pc{\csname @req@valueof@pc@#1\endcsname}
  \xdef\@@req@pd{\csname @req@valueof@pd@#2\endcsname}
  \xdef\@@req@s{\csname @req@valueof@s@#3\endcsname}
  \xdef\@@req@v{\csname @req@valueof@v@#4\endcsname}
}

% \itemizecsv - Typesets an itemize list using comma-separated values
\def\@itemizecsv@empty{\@na}
\def\@itemizecsv@style{}
\newcommand{\itemizecsv}[1]
           {\if\relax\detokenize{#1}\relax \@itemizecsv@empty%
             \else\begin{itemize}\foreach \i in {#1}%
                        {\item {\@itemizecsv@style\i}}\end{itemize} \fi}

% --8<---- TRACEABILITY (REQUIRES LUALATEX) ----
\def\@traceability@registerOrigin#1{}
\def\@traceability@addOrigins#1#2{}

\if@traceability@pp
  \directlua{
    __registered_origin = {}
    __is_origin_of = {}

    function __register_origin(i)
        __registered_origin[i] = true
    end

    function __add_origins(i, origin_csv)
        __is_origin_of[i] = {}
        for j in string.gmatch(origin_csv, '[^, ]+') do
            __is_origin_of[i][j] = true end
    end

    function __filter_keys(tab, patterns)
        local ret = {}
        local lua_pats = string.explode(patterns, ',')

        for key,_ in pairs(tab) do
            for _,pat in ipairs(lua_pats) do
                if string.match(key, pat) then table.insert(ret, key) end
            end
        end
        table.sort(ret)
        return ret
    end

    function __print_matrix(item_luapat, origin_luapat, opts)
        local items = __filter_keys(__is_origin_of, item_luapat)
        local origins = __filter_keys(__registered_origin, origin_luapat)

        local i_offset, o_offset = opts.i_offset or 0,
                                  opts.o_offset or 0
        local i_count, o_count = opts.i_count or (\string#items - i_offset),
                                opts.o_count or (\string#origins - o_offset)

        \unexpanded{
        tex.print([[\begin{traceabilityMatrix}{l|*{]] .. o_count .. [[}{c|}}]])
        for i = 1+o_offset, o_offset+o_count do
            tex.print([[&\traceabilityMatrixHeader{]] .. "\\hyperref[req:" .. origins[i] .. "]{" .. origins[i] .. "}}")
        end
        tex.print([[\\ \hline]])

        for i = 1+i_offset, i_offset+i_count do
            tex.print("\\hyperref[req:" .. items[i] .. "]{" .. items[i] .. "}")
            for j = 1+o_offset, o_offset+o_count do
                tex.print([[&]])
                if __is_origin_of[items[i]][origins[j]] then
                    tex.print([[\traceabilityMatrixChar]]) end
            end
            tex.print([[\\ \hline]])
        end
        tex.print([[\end{traceabilityMatrix}]])
        }
    end
  }

  \gdef\traceability@registerOrigin#1{\directlua{__register_origin('#1')}}
  \gdef\traceability@addOrigins#1#2{\directlua{__add_origins('#1', '#2')}}

  % \traceabilityPrintMatrix - Generate a traceability matrix (items in rows;
  %                            their origins in colums)
  %
  % Usage: \traceabilityPrintMatrix{<ITEM_LUA_PATTERN>[,...]}
  %                                {<ORIGIN_LUA_PATTERN>[,...]}{<OPTIONS>}
  % <OPTIONS> may include values for [io]_offset=N (skip N items/origins),
  % and [io]_count=N (number of items/origins to typeset).
  %
  % e.g.: `\traceabilityPrintMatrix{^F\37-SR}{^CA\37-UR}{i_offset=0,i_count=24}'
  %
  %       Generates a matrix that correlates items that have prefix 'F-SR' to
  %       those that start with 'CA-UR'.
  %
  \gdef\traceabilityPrintMatrix#1#2#3{%
    \directlua{__print_matrix('\unexpanded{#1}', '\unexpanded{#2}',
                              \string{#3\string})}}

  % redefine these macros to change table style
  \newenvironment{traceabilityMatrix}[1]
                 {\footnotesize\renewcommand{\arraystretch}{1.5}
                   \begin{tabular}{#1}}
                 {\end{tabular}}
  \newcommand{\traceabilityMatrixHeader}[1]
             {\multicolumn{1}{c}{\rlap{\rotatebox{45}{#1}}\rule{\widthof{\traceabilityMatrixChar}*\real{2}}{0pt}}}
  \gdef\traceabilityMatrixChar{\bullet}
\fi


% --8<---- TEMPLATE DEFINITIONS ----
% \begin{SRStabular}[caption][label][position][width]{id}
\NewDocumentEnvironment{SRStabular}{o o O{h} O{.85} m}{%
    \begin{table}[#3]
      \centering
      \IfNoValueTF{#1}%
        {}
        {\caption{#1}}  % add caption
      \IfNoValueTF{#2}%
        {\label{req:#5}}  % default label
        { \ifthenelse{\isempty{#2}}
          {\label{req:#5}}
          {\label{#2}}  % custom label
        }
      \renewcommand{\arraystretch}{1.5}
      \noindent
      \begin{tabular}{@{}p{83pt}@{}p{#4\columnwidth-83pt}@{}}
        %
        \toprule
        \multicolumn{2}{@{}l}{\bfseries#5}\\
        \hline
   }
   {
        \bottomrule
      \end{tabular}
    \end{table}
  }

\newenvironment{baseReq}[2]  % extender is responsible for adding \endSRStabular
  {%
    \traceability@registerOrigin{#1} \@req@parseArgs #2;
    \if@captions@pp
      \SRStabular[\@req~#1]{#1}
    \else
      \SRStabular{#1}
    \fi
    \textbf{\@req@description} &
  }%
  {%
    \\
    \textbf{\@req@priocus} & \@@req@pc \\
    \textbf{\@req@priodev} & \@@req@pd \\
    \textbf{\@req@sta}     & \@@req@s \\
    \textbf{\@req@verif}   & \@@req@v \\
  }%


% Usage: \begin[<caption>]{userReq}{<ID>}{pc=X,pd=Y,s=Z,v=A}
%        ...
%        \end{userReq}
%
% <X>, <Y> and <A> may be one of 'h', 'm', 'l'; high, medium, low
%               (respectively); <Z> may be 'nc', 'c', 'vi'
% <caption> is optional
\newenvironment{userReq}[2]
  {\baseReq{#1}{#2}}
  {\endbaseReq\endSRStabular}


% \printureqtemplate[caption]{id-format}
\newcommand{\printureqtemplate}[2][\@req@template@u]{%
  \begin{SRStabular}[#1][tab:ur-template]{#2}
    \textbf{\@req@description} & \@req@description@desc\\
    \textbf{\@req@priocus}     & \@req@priocus@desc \\
    \textbf{\@req@priodev}     & \@req@priodev@desc \\
    \textbf{\@req@sta}         & \@req@sta@desc \\
    \textbf{\@req@verif}       & \@req@verif@desc \\
  \end{SRStabular}
}

% Usage: \begin{softwareReq}{<ID>}{pc=X,pd=Y,s=Z,v=A}{<ORIGIN LIST>}
%        ...
%        \end{softwareReq}
%
% <X>, <Y> and <A> may be one of 'h', 'm', 'l'; high, medium, low
%               (respectively); <Z> may be 'nc', 'c', 'vi'
\newenvironment{softwareReq}[3]
  {%
    \traceability@addOrigins{#1}{#3}\def\@@req@origin{#3}
    \baseReq{#1}{#2}}
  {%
    \endbaseReq
    \textbf{\@req@origin} & \@@req@origin \\
    \endSRStabular
  }


% \printsreqtemplate[caption]{id-format}
\newcommand{\printsreqtemplate}[2][\@req@template@s]{%
  \begin{SRStabular}[#1][tab:sr-template]{#2}
    \textbf{\@req@description} & \@req@description@desc\\
    \textbf{\@req@priocus}     & \@req@priocus@desc \\
    \textbf{\@req@priodev}     & \@req@priodev@desc \\
    \textbf{\@req@sta}         & \@req@sta@desc \\
    \textbf{\@req@verif}       & \@req@verif@desc \\
    \textbf{\@req@origin}      & \@req@origin@desc \\
  \end{SRStabular}
}


% Usage: \begin{useCase}{<ID>}{<NAME>}{<ACTORS>}{<SHORT_DESCRIPTION>}
%                       {<PRE_COND>}{<POST_COND>}
%        ...
%        \end{useCase}
\newenvironment{useCase}[6]
  {
    \def\@@uc@precond{#5}\def\@@uc@postcond{#6}
    \if@captions@pp
      \SRStabular[\@uc~#1][][h][.9]{#1}
    \else
      \SRStabular[][][h][.9]{#1}
    \fi
      \textbf{\@uc@name}             & #2 \\
      \textbf{\@uc@actors}           & #3 \\
      \textbf{\@uc@shortdescription} & #4 \\
      \textbf{\@uc@description}      &
  }
  {
      \\
      \textbf{\@uc@precond}          & \@@uc@precond \\
      \textbf{\@uc@postcond}         & \@@uc@postcond \\
    \endSRStabular
  }

% \printuctemplate[caption]{id-format}
\newcommand{\printuctemplate}[2][\@uc@template]{%
  \begin{SRStabular}[#1][tab:uc-template][h][.9]{#2}
    \textbf{\@uc@name}              & \@uc@name@desc\\
    \textbf{\@uc@actors}            & \@uc@actors@desc \\
    \textbf{\@uc@shortdescription}  & \@uc@shortdescription@desc \\
    \textbf{\@uc@description}       & \@uc@description@desc \\
    \textbf{\@uc@precond}           & \@uc@precond@desc \\
    \textbf{\@uc@postcond}          & \@uc@postcond@desc \\
  \end{SRStabular}
}


\newenvironment{baseComponent}[3]
  {
    \if@captions@pp
      \SRStabular[\@component~`#1']{#1}
    \else
      \SRStabular{#1}
    \fi
    \textbf{\@component@role} & #2 \\
    \textbf{\@component@deps} & #3 \\
  }
  {\endSRStabular}


% Usage: \begin{component}{<ID>}{<ROLE>}{<DEPS>}{<DATA>}{<RESOURCES>}{<ORIGIN>}
%        ...
%        \end{component}
\newenvironment{component}[6]
  {
    \traceability@addOrigins{#1}{#6}
    \def\@@component@data{#4}\def\@@component@resources{#5}
    \def\@@component@origin{#6}
    \begin{baseComponent}{#1}{#2}{#3}
      \textbf{\@component@description} &
  }
  {
      \\
      \textbf{\@component@data}      & \expandafter\itemizecsv\expandafter{\@@component@data} \\
      \textbf{\@component@resources} & \expandafter\itemizecsv\expandafter{\@@component@resources}\\
      \textbf{\@component@origin}    & \@@component@origin \\
    \end{baseComponent}
  }


% \printcomptemplate[caption]{id-format}
\newcommand{\printcomptemplate}[2][\@component@template.]{%
  \begin{SRStabular}[#1][tab:comp-template]{#2}
    \textbf{\@component@role}         & \@component@role@desc\\
    \textbf{\@component@deps}         & \@component@deps@desc \\
    \textbf{\@component@description}  & \@component@description@desc \\
    \textbf{\@component@data}         & \@component@data@desc \\
    \textbf{\@component@resources}    & \@component@resources@desc \\
    \textbf{\@component@origin}       & \@component@origin \\
  \end{SRStabular}
}

\newenvironment{subComponent}[4]
  {
    \begin{baseComponent}{#1}{#2}{#3}
    \textbf{\@component@types}       & \def\@itemizecsv@style{\ttfamily}\itemizecsv{#4} \\
    \textbf{\@component@members}     & \hangindent=10pt\hangafter=1\ttfamily
  }
  {\\\end{baseComponent}}

% TODO: \printsubcomptemplate[caption]{id-format}



% Usage: \begin{testCase}{<ID>}{<INPUT>}{<OUTPUT>}{<ENV>}{<ORIGIN>}
%        ...
%        \end{testCase}
\newenvironment{testCase}[5]
  {
    \def\@@test@input{#2}\def\@@test@output{#3}\def\@@test@env{#4}
    \traceability@addOrigins{#1}{#5}\def\@@test@origin{#5}
    \SRStabular{#1}
    \@test@description &
  }
  {
    \\
    \textbf{\@test@input}  & \@@test@input \\
    \textbf{\@test@output} & \@@test@output \\
    \textbf{\@test@origin} & \@@test@origin \\
    \textbf{\@test@env}    & \expandafter\itemizecsv\expandafter{\@@test@env} \\
    \endSRStabular
  }

% TODO: \printtctemplate[caption]{id-format}


\endinput
